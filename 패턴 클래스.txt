
※ Pattern 클래스


1. 정규표현식



정규 표현식(Regular Expression)은 문자열을 찾기 위한 조건을 문자열로 표현한 것으로서 텍스트에서 새로운 문자열로 치환하거나
올바른 값인지 검사할 때 사용합니다. 정규표현식을 활용하는 예를 들어 살펴보면 텍스트 문서에서 KOREA라는 단어를 찾아 south Korea로 
모두 변경할 수 있고 이메일 문자열을 대상으로 이메일 패턴에 맞게 입력되었는지 유효성을 검사할 수 있습니다.

이렇게 특정 문자열을 찾아 치환하거나 유효성을 검사하려면 우선 특정 문자열을 찾아야 하며 특정 문자열을 찾기 위한 패턴, 즉
정규표현식을 만들어야 합니다. 정규표현식을 만들 때는 특정한 의미가 있는 기호들을 사용합니다.
이런 기호들을 "메타 문자" 라고 합니다. 다음은 정규 표현식에서 문자를 지정하는 데 사용하는 메타 문자와 의미입니다.

(표 1) 정규 표현식의 문자 지정 메타 문자와 의미

메타 문자                        의미
----------------------------------------------------------------
   \d                :                숫자
   \D                :             숫자가 아님
   \w               :             문자 또는 숫자
   \W              :         문자 또는 숫자가 아님
   \s               :                    공백
   \S               :             공백이 아닌 것
  a-z              :     a부터 z사이에 있는 모든 소문자
  A-Z             :     A부터 Z사이에 있는 모든 대문자
   0-9             :           0-9까지의 모든 숫자



  메타 문자                                   의미
---------------------------------------------------------------------------------------
       []                             -  한 개의 문자
                                      -[abc] : a,b,c 중 하나
                                     -[^abac] : a,b,c 가 아닌 문자 하나
                                    - [a-zA-Z] : a부터 z 또는 A부터 Z사이의 문자 하나


        ()                         -그룹 지정




 다음은 정규표현식에서 횟수를 지정하는 데 사용하는 메타문자의 의미입니다.


(표 2) 정규 표현식의 횟수 지정 메타 문자와 의미


   메타 문자                                        의미
----------------------------------------------------------------------------------------------

        *                                               0 또는 1번 이상  
        +                                              1번 이상
        ?                                               0또는 1번
        {n}                                             n번
        {n,}                                            n번 이상
       {n,m}                                          n번 이상 m번 이하





 정규표현식의 간단한 예제를 살펴보겠습니다.
 [A-Z][a-zA-Z]*

첫 문자는 A부터 Z사이의 한 글자가 오고 , 두번째 문자는 a부터 z 또는 A부터 Z 사이의 문자가 0개 이상(*) 올 수 있는 표현식 입니다.

[a-zA-Z]+(['-][a-zA-Z]+)*

시작 문자는 알파벳 대문자 또는 소문자가 오고 1개 이상(+) 올 수 있으며,
 다음에 오는 문자열은 (['-][a-zA-Z]+) 그룹 패턴의 문자열이 0개 이상(*) 올 수 있는 패턴입니다.

(['-][a-zA-Z]+) 

 첫 문자는 ' 또는 - 기호가 올 수 있으며 두 번째 글자부터 알파벳이 1개 이상 올 수 있는 표현식 입니다.


01[0-9]-\\d{3,4}-\\d{4}

숫자 3자리 - 숫자 3자리 또는 4자리 - 숫자 4자리가 나오는 표현식 입니다.

\\w+@\\w+\\.\\w+(\\.\\w+)?

\w+(\\w+로도 유연성 있게 사용함)  는 한개 이상의 알파벳 또는 숫자를 의미하고 \. 은 점(.)을 의미합니다.
위 표현식은 문자가 1개 이상 나오고 @이 나오고 점(.)과 문자들이 반복해서 나오는 패턴입니다.





2. 패턴 검사

정규표현식으로 패턴을 완성한 후에는 특정 문자열들이 패턴에 맞는지 검사할 수 있습니다.
문자열의 패턴을 검사할 때는 java.util.Pattern 클래스의 matches( ) 메소드르 사용합니다.
다음은 Pattern 의 matches( ) 메소드 선언부입니다.

static boolean matches( String regex, CharSquence input)

matches( ) 메소드의 첫 번째 매개변수에는 정규표현식을 지정하고 두 번째 매개변수에는 패턴을 검사할 문자열을 
지정합니다. 그리고 지정한 문자열이 패턴과 일치하면 true를 그렇지 않으면 false를 반환합니다.

다음은 정규표현식 작성과 패턴을 검사하는 matches() 메소드를 사용한 예입니다.

package chap3;

import java.util.regex.Pattern;

public class Test18 {
	
	public static void main(String[] args){
		
		String firstName = "Oh";
		String lastName = "Jung-Im";
		String tel = "010-1234-5678";
		String email = "purum@ruby.com";
		
		
		
		boolean firstName_check = Pattern.matches("[A-Z][a-zA-Z]*", firstName);
		boolean lastName_check = Pattern.matches("[a-zA-Z]+(['-][a-zA-Z]+)*", lastName);
		
		String tel_pat = "01[0-9]-\\d{3,4}-\\d{4}";
		String email_pat = "\\w+@\\w+\\.\\w+(\\.\\w+)?";
		
		boolean tel_check = Pattern.matches(tel_pat , tel);
		boolean email_check = Pattern.matches(email_pat, email);
		
		System.out.println("first Name : "+firstName_check);
		System.out.println("last Name : " + lastName_check);
		System.out.println("tel : "+ tel_check);
		System.out.println("email : " + email_check);
		//System.out.println(Pattern.matches(arg0, arg1));
	System.out.println(Pattern.matches("\\w", "!"));
		//"\\w" 는 정규표현식이고 "!" 는 패턴을 검사할 문자열입니다.(느낌표로 사용)
		// 패턴 검사를했을때 ! 없어서 값이 일치하지 않아서 false가 출력된것입니다.
	}

}


-----실행결과------
first Name : true
last Name : true
tel : true
email : true
false




3. String 적용

다음은 String 클래스에서 제공하는 메소드입니다. 3개의 메소드 모두 첫 번째 매개변수로 정규표현식의 문자열을 전달받습니다.
문자열을 치환하거나 나눌 때 정규표현식을 사용하면 훨씬 더 유용하게 사용되는 메소드입니다.

String replaceAll(String regex , String replacement)
-> 지정된 패턴의 문자열을 찾아 두 번째 매개변수 문자열로 대체합니다.

String replaceFirst(String regex , String replacement)
-> 지정된 패턴의 첫 번째 문자열을 찾아 두 번때 매개변수 문자열로 대체합니다.

String[] split(String regex)
-> 지정된 패턴의 조건에 따라 문자열을 분리합니다.

예제를 통해 자세한 내용을 살펴보겠습니다.
package chap3;

import java.util.Arrays;

public class Test19 {

	public static void main(String[] args) {
		String title = "**** 2018 Olympic ****";
		title = title.replaceAll("\\*", "=");
		System.out.println(title);
		title =title.replaceAll("\\w+", "Winter");
		System.out.println(title);
		title = title.replaceAll("Winter", "Olympic");
				System.out.println(title);
		
		String str = "1,2,3,4,5,6,7,8";
		String[] result = str.split(",\\s*");
		System.out.println(Arrays.toString(result));
		
		String temp = "-20";
		temp = temp.replaceFirst("\\W","+");
		System.out.println(temp);
				

	}

}


----------------실행 결과--------------------
==== 2018 Olympic ====
==== Winter Winter ====
==== Olympic Olympic ====
[1, 2, 3, 4, 5, 6, 7, 8]
+20


소스에 대한 자세한 설명은 다음과 같습니다.

title = title.replaceAll("\\*", "=");

||*표현식은 * 횟수를 나타내는 메타 문자가 아닌 일반 문자 * 로 처리합니다. *기호를 찾아 = 로 변환합니다.


title =title.replaceAll("\\w+", "Winter");

"||+" 는 1개 이상의 알파벳 또는 숫자로 이루어진 문자열을 찾아 Winter 문자열로 변환합니다.


title = title.replaceAll("Winter", "Olympic");

Winter 문자열을 찾아 Olympic 문자열로 변환합니다.



String[] result = str.split(",\\s*");

,||s*은 콤마(,) 그리고 0개 이상의 공백으로 이루어진 문자열을 기준으로 str 문자열을 분리하여 배열로 반환합니다.



System.out.println(Arrays.toString(result));

Arrays.toString()메소드는 인자로 전달한 배열의 요소들을 문자열로 반환합니다. 18번 줄은 result 배열의 요소들을 출력하는 명령문입니다.


temp = temp.replaceFirst("\\W","+");

replaceFirst() 메소드는 문자열 중에서 첫 번째로 패턴과 일치하는 부분만 변환합니다. ||w 표현식은 알파벳 또는 숫자가 아닌 문자를 찾는 패턴입니다.
temp에서 첫 번째로 알파벳 또는 숫자가 아닌 것을 찾아 +로 변환합니다.